{
	"info": {
		"_postman_id": "3f31e9a4-8dce-4e2d-a76d-eafc4e80aa5b",
		"name": "MARS API Positive Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16651456",
		"_collection_link": "https://solar-rocket-270103.postman.co/workspace/ac205c5b-9fdc-4b6d-8a5a-e080e85d4041/collection/16651456-3f31e9a4-8dce-4e2d-a76d-eafc4e80aa5b?action=share&source=collection_link&creator=16651456"
	},
	"item": [
		{
			"name": "UserRequestsFolder",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Valid Signup",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"userurl\", \"http://localhost:60968\");\r",
											"var email=\"saipraneeth@gmail.com\";\r",
											"var Pwd=\"Password1\"\r",
											"pm.globals.set(\"email_id\",email);\r",
											"pm.globals.set(\"Password\",Pwd);\r",
											"var email = pm.globals.get(\"email_id\"); \r",
											"console.log(\" Email is:\", email); \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Check status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.isSuccess).to.be.true;\r",
											"   console.log(responseBody.message);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"isSuccess\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"isSuccess\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2500\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"countryDialCode\": \"+64\",\r\n  \"email\": \"{{email}}\",\r\n  \"firstName\": \"sai\",\r\n  \"lastName\": \"praneeth\",\r\n  \"mobilePhone\": \"04677111\",\r\n  \"password\": \"{{Password}}\",\r\n  \"terms\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{userurl}}/authentication/authentication/signup",
									"host": [
										"{{userurl}}"
									],
									"path": [
										"authentication",
										"authentication",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Valid Signin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var jsonData = pm.response.json();\r",
											"var token = jsonData.token.token;\r",
											"pm.globals.set(\"bearerToken\", token);\r",
											"pm.test(\"Check status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"isSuccess\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"token\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"token\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"expires\": {\r",
											"          \"type\": \"number\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"token\",\r",
											"        \"expires\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"isSuccess\",\r",
											"    \"token\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2500\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email_id}}\",\r\n  \"password\": \"{{Password}}\",\r\n    \"rememberMe\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{userurl}}/authentication/authentication/signin",
									"host": [
										"{{userurl}}"
									],
									"path": [
										"authentication",
										"authentication",
										"signin"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "LanguageRequest Folder",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Add Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.globals.set(\"Langid\",id);\r",
											"pm.test(\"Validate status code is 200\",()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Language has been added successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											"var LanguageSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(LanguageSchema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const lang = [\"Hindi\", \"Telugu\", \"English\", \"Japanese\", \"Spanish\", \"French\", \"Tamil\"];\r",
											"const level= [\"Basic\",\"Conversational\",\"Fluent\",\"Native/Bilingual\"];\r",
											"const randomLang= lang[Math.floor(Math.random() * lang.length)];\r",
											"const randomLevel=level[Math.floor(Math.random() * level.length)];\r",
											"pm.globals.set(\"AddLanguage\", randomLang);\r",
											"console.log(\"Language is : \" + randomLang);\r",
											"pm.globals.set(\"AddLevel\", randomLevel);\r",
											"console.log(\"level is : \" + randomLevel);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"level\": \"{{AddLevel}}\",\r\n  \"name\": \"{{AddLanguage}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/addLanguage",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"addLanguage"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"array\",\r",
											"  \"items\": {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\": {\r",
											"      \"personLanguageId\": {\r",
											"        \"type\": \"string\"\r",
											"      },\r",
											"      \"language\": {\r",
											"        \"type\": \"string\"\r",
											"      },\r",
											"      \"languageLevel\": {\r",
											"        \"type\": \"string\"\r",
											"      }\r",
											"    },\r",
											"    \"required\": [\r",
											"      \"personLanguageId\",\r",
											"      \"language\",\r",
											"      \"languageLevel\"\r",
											"    ]\r",
											"  }\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"pm.test(\"Response time is within 2000ms\", () => {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personLanguageId\": \"{{Langid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/getLanguage",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"getLanguage"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Language has been added successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											"  var LanguageSchema ={\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(LanguageSchema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const lang = [\"Hindi\", \"Telugu\", \"English\", \"Japanese\", \"Spanish\", \"French\", \"Tamil\"];\r",
											"const level= [\"Basic\",\"Conversational\",\"Fluent\",\"Native/Bilingual\"];\r",
											"const randomLang= lang[Math.floor(Math.random() * lang.length)];\r",
											"const randomLevel=level[Math.floor(Math.random() * level.length)];\r",
											"pm.environment.set(\"updatedLanguage\", randomLang);\r",
											"console.log(\"Updated Language: \" + randomLang);\r",
											"pm.environment.set(\"UpdatedLevel\", randomLevel);\r",
											"console.log(\"Updated Level: \" + randomLevel);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{Langid}}\",\r\n  \"level\": \"{{UpdatedLevel}}\",\r\n  \"name\": \"{{updatedLanguage}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/updateLanguage",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"updateLanguage"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Language has been deleted successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											" var schema= { \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"language\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"language\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(schema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{Langid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/deleteLanguage",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"deleteLanguage"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "SkillsRequestFolder",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Add Skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.globals.set(\"Skillid\",id);\r",
											"pm.test(\"Validate status code is 200\",()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Skill has been added successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											"var SkillSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(SkillSchema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const skill = [\"Java\", \"Selenium\", \"Postman\", \"Sql\", \"Playwright\", \"Cypress\", \"Jmeter\"];\r",
											"const skilllevel= [\"Beginner\",\"Intermediate\",\"Expert\"];\r",
											"const randomSkill= skill[Math.floor(Math.random() * skill.length)];\r",
											"const randomSkillLevel=skilllevel[Math.floor(Math.random() * skilllevel.length)];\r",
											"pm.globals.set(\"AddSkill\", randomSkill);\r",
											"console.log(\"Generated Skill: \" + randomSkill);\r",
											"pm.globals.set(\"AddskillLevel\", randomSkillLevel);\r",
											"console.log(\"Generated Skilllevel: \" + randomSkillLevel);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ExperienceLevel\": \"{{AddskillLevel}}\",\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": \"{{AddSkill}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/addSkill",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"addSkill"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\",()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Skill has been fetched successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											"var SkillSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(SkillSchema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ExperienceLevel\": \"{{AddskillLevel}}\",\r\n  \"PersonSkillId\": \"{{Skillid}}\",\r\n  \"Skill\": \"{{AddSkill}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/getSkill",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"getSkill"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Skill has been added successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											" var SkillSchema ={\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(SkillSchema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const skill = [\"Java\", \"Selenium\", \"Postman\", \"Sql\", \"Playwright\", \"Cypress\", \"Jmeter\"];\r",
											"const skilllevel= [\"Beginner\",\"Intermediate\",\"Expert\"];\r",
											"const randomSkill= skill[Math.floor(Math.random() * skill.length)];\r",
											"const randomSkillLevel=skilllevel[Math.floor(Math.random() * skilllevel.length)];\r",
											"pm.environment.set(\"Updated Skill\", randomSkill);\r",
											"console.log(\"Updated Skill: \" + randomSkill);\r",
											"pm.environment.set(\"Updated skillLevel\", randomSkillLevel);\r",
											"console.log(\"Updated Skilllevel: \" + randomSkillLevel);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ExperienceLevel\": \"{{Updated skillLevel}}\",\r\n  \"PersonSkillId\": \"{{Skillid}}\",\r\n  \"Skill\": \"{{Updated Skill}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/updateSkill",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"updateSkill"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Skill",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Skill has been deleted successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											" var schema= { \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"skill\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"skill\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(schema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(schema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PersonSkillId\": \"{{Skillid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/deleteSkill",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"deleteSkill"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "CertificationRequestFolder",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Add Certification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var id = jsonData.id;\r",
											"pm.globals.set(\"Certid\",id);\r",
											"pm.test(\"Validate status code is 200\",()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Certification has been added successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											"var CertificationSchema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(CertificationSchema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const Certificate = [\"ISTQB\", \"AWS\", \"JAVABEGINNER\", \"SCRUM\", \"CTFL\", \"CTAL\"];\r",
											"const From= [\"Adobe\",\"ITB\",\"SUN\",\"Amazon\",\"AGY\",\"Oracle\"];\r",
											"const randomCert= Certificate[Math.floor(Math.random() * Certificate.length)];\r",
											"const randomFrom=From[Math.floor(Math.random() * From.length)];\r",
											"pm.globals.set(\"Certificate\", randomCert);\r",
											"console.log(\"Certificate is : \" + randomCert);\r",
											"pm.globals.set(\"From\", randomFrom);\r",
											"console.log(\"From: \" + randomFrom);\r",
											"pm.globals.set(\"Year\",\"2021\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"certificationFrom\": \"{{From}}\",\r\n  \"certificationName\": \"{{Certificate}}\",\r\n  \"certificationYear\": \"{{Year}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/addCertification",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"addCertification"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Certification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\",()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Certification has been added successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											"var Schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(Schema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{Certid}}\",\r\n  \"certificationName\": {{Certificate}},\r\n  \"certificationFrom\": \"{{From}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/getCertification",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"getCertification"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit Certification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Certification has been added successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											" var Schema ={\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(Schema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"UpdatedYear\",\"2022\")"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"certificationFrom\": \"{{From}}\",\r\n  \"certificationName\": \"{{Certificate}}\",\r\n  \"certificationYear\": \"{{UpdatedYear}}\",\r\n  \"id\": \"{{Certid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/updateCertification",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"updateCertification"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Certification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Certification has been deleted successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											" var schema= {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"certificationName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"certificationName\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(schema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"var schema={\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"certificationName\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"certificationName\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(schema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{Certid}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/deleteCertification",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"deleteCertification"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ListingRequestFolder",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "AddListing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.globals.set(\"listingId\",responseBody.id);\r",
											"\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.success).to.be.true;\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"editFlag\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"id\",\r",
											"    \"editFlag\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"tags\": [\r\n    {\r\n      \"id\": \"Cypress\",\r\n      \"text\": \"@Cypress\"\r\n    }\r\n  ],\r\n  \"availability\": {\r\n    \"dayEntries\": [\r\n      {\r\n        \"Available\": \"true\",\r\n        \"EndTime\": \"\",\r\n        \"StartTime\": \"\"\r\n      }\r\n      \r\n    ],\r\n    \"endDate\": \"2024-11-30\",\r\n    \"startDate\": \"2024-10-25\"\r\n  },\r\n  \"categoryId\": \"6\",\r\n  \"charge\": \"4\",\r\n  \"credentials\": \"true\",\r\n  \"description\": \"Cypress End to End By Sai\",\r\n  \"isActive\": \"true\",\r\n  \"isTradable\": \"true\",\r\n  \"locationType\": \"1\",\r\n  \"serviceType\": \"0\",\r\n  \"skillTrade\": [\r\n    {\r\n      \"id\": \"\",\r\n      \"text\": \"\"\r\n    }\r\n  ],\r\n  \"subcategoryId\": \"4\",\r\n  \"title\": \"Cypress\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/addListing",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"addListing"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetService CategoryCount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.success).to.be.true;\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"          \"categoryId\": {\r",
											"            \"type\": \"number\"\r",
											"          },\r",
											"          \"subcategoryId\": {\r",
											"            \"type\": \"number\"\r",
											"          },\r",
											"          \"count\": {\r",
											"            \"type\": \"number\"\r",
											"          }\r",
											"        },\r",
											"        \"required\": [\r",
											"          \"categoryId\",\r",
											"          \"subcategoryId\",\r",
											"          \"count\"\r",
											"        ]\r",
											"      }\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 1000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sortPagination\": {\r\n    \"limit\": 2,\r\n    \"offset\": 0\r\n  },\r\n  \"terms\": {\r\n    \"categoryIndex\": 2,\r\n    \"searchString\": \"Java\",\r\n    \"subcategoryIndex\": 1,\r\n    \"uId\": null\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/GetServiceCategoryCount",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"GetServiceCategoryCount"
									]
								}
							},
							"response": []
						},
						{
							"name": "DeleteServiceListing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.success).to.be.true;\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"title\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"title\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n  \"{{listingId}}\"\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/deleteServiceListing",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"deleteServiceListing"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.success).to.be.true;\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"balance\": {\r",
											"      \"type\": \"number\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"balance\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/getBalance",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"getBalance"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check if success is true\", () => {\r",
											"    pm.expect(responseBody.success).to.be.true;\r",
											"});\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"categories\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"          \"id\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"value\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"name\": {\r",
											"            \"type\": \"string\"\r",
											"          },\r",
											"          \"subcategory\": {\r",
											"            \"type\": \"array\",\r",
											"            \"items\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"id\": {\r",
											"                  \"type\": [\"null\", \"string\"] \r",
											"                },\r",
											"                \"value\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"name\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"isDeleted\": {\r",
											"                  \"type\": \"boolean\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"id\",\r",
											"                \"value\",\r",
											"                \"name\",\r",
											"                \"isDeleted\"\r",
											"              ]\r",
											"            }\r",
											"          }\r",
											"        },\r",
											"        \"required\": [\"id\", \"value\", \"name\", \"subcategory\"]\r",
											"      }\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\"success\", \"categories\"]\r",
											"};\r",
											"pm.test(\"Validate schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});\r",
											"pm.test(\"Validate headers\", () => {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000ms\", () => {\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{listingURL}}/listing/listing/getCategories",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"getCategories"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetMultipleRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.success).to.be.true;\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"count\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"data\",\r",
											"    \"count\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"limit\": 5,\r\n  \"offset\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/getMultipleServiceListing",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"getMultipleServiceListing"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Sent Requests",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.success).to.be.true;\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"senderId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"senderName\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"recipientId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"recipientName\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"listingId\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"totalHours\": {\r",
											"              \"type\": \"number\"\r",
											"            },\r",
											"            \"totalAmount\": {\r",
											"              \"type\": \"number\"\r",
											"            },\r",
											"            \"status\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"isViewed\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"isCompletedBySender\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"isCompletedBySeller\": {\r",
											"              \"type\": \"boolean\"\r",
											"            },\r",
											"            \"category\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"categoryId\": {\r",
											"              \"type\": \"integer\"\r",
											"            },\r",
											"            \"title\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"message\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"senderLastName\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"senderCity\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"senderCountry\": {\r",
											"              \"type\": \"null\"\r",
											"            },\r",
											"            \"createdOn\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"updatedOn\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"isTradable\": {\r",
											"              \"type\": \"boolean\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"id\",\r",
											"            \"senderId\",\r",
											"            \"senderName\",\r",
											"            \"recipientId\",\r",
											"            \"recipientName\",\r",
											"            \"listingId\",\r",
											"            \"totalHours\",\r",
											"            \"totalAmount\",\r",
											"            \"status\",\r",
											"            \"isViewed\",\r",
											"            \"isCompletedBySender\",\r",
											"            \"isCompletedBySeller\",\r",
											"            \"category\",\r",
											"            \"categoryId\",\r",
											"            \"title\",\r",
											"            \"message\",\r",
											"            \"senderLastName\",\r",
											"            \"senderCity\",\r",
											"            \"senderCountry\",\r",
											"            \"createdOn\",\r",
											"            \"updatedOn\",\r",
											"            \"isTradable\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"data\"\r",
											"  ]\r",
											" }\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/getSentRequests",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"getSentRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get TradeRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"var ReqId = responseBody.data[0].id;\r",
											"pm.globals.set(\"ReqId\", ReqId);  // Correctly setting the ReqId variable\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.success).to.be.true;\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"totalCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"data\",\r",
											"    \"totalCount\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"direction\": \"descending\",\r\n  \"limit\": 3,\r\n  \"offset\": 0,\r\n  \"sortBy\": \"createdOn\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/getTradeRequests",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"getTradeRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Listings",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.success).to.be.true;\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"totalCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"data\",\r",
											"    \"totalCount\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"sortPagination\": {\r\n    \"limit\": \"9\",\r\n    \"offset\": \"0\"\r\n  },\r\n  \"terms\": {\r\n    \"categoryIndex\": \"6\",\r\n    \"searchString\": \"Java\",\r\n    \"subcategoryIndex\": \"2\",\r\n    \"uId\": null\r\n  }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/searchListings",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"searchListings"
									]
								}
							},
							"response": []
						},
						{
							"name": "SendTradeRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.success).to.be.true;\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"id\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"id\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ListingId\": \"{{ListingId}}\",\r\n  \"Message\": \"test\",\r\n  \"TotalAmount\": 0,\r\n  \"TotalHours\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/sendTradeRequest",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"sendTradeRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetWorkSample",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"defaultImg\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"defaultImg\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/getWorkSample?id=6700b81071480f0001b3091e",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"getWorkSample"
									],
									"query": [
										{
											"key": "id",
											"value": "6700b81071480f0001b3091e"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Service",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"serviceListing\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"id\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"sellerId\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"charge\": {\r",
											"          \"type\": \"number\"\r",
											"        },\r",
											"        \"title\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"description\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"serviceType\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"locationType\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"availability\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"startDate\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"endDate\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"dayEntries\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"object\",\r",
											"                  \"properties\": {\r",
											"                    \"startTime\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"endTime\": {\r",
											"                      \"type\": \"string\"\r",
											"                    },\r",
											"                    \"available\": {\r",
											"                      \"type\": \"boolean\"\r",
											"                    }\r",
											"                  },\r",
											"                  \"required\": [\r",
											"                    \"startTime\",\r",
											"                    \"endTime\",\r",
											"                    \"available\"\r",
											"                  ]\r",
											"                }\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"startDate\",\r",
											"            \"endDate\",\r",
											"            \"dayEntries\"\r",
											"          ]\r",
											"        },\r",
											"        \"workSample\": {\r",
											"          \"type\": \"null\"\r",
											"        },\r",
											"        \"categoryId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"subcategoryId\": {\r",
											"          \"type\": \"integer\"\r",
											"        },\r",
											"        \"tags\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": [\r",
											"            {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"id\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"text\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"id\",\r",
											"                \"text\"\r",
											"              ]\r",
											"            }\r",
											"          ]\r",
											"        },\r",
											"        \"comments\": {\r",
											"          \"type\": \"null\"\r",
											"        },\r",
											"        \"ratings\": {\r",
											"          \"type\": \"null\"\r",
											"        },\r",
											"        \"ratingAverages\": {\r",
											"          \"type\": \"null\"\r",
											"        },\r",
											"        \"ratingTotalsAndCounts\": {\r",
											"          \"type\": \"null\"\r",
											"        },\r",
											"        \"skillTrade\": {\r",
											"          \"type\": \"array\",\r",
											"          \"items\": {}\r",
											"        },\r",
											"        \"isTradable\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"isActive\": {\r",
											"          \"type\": \"boolean\"\r",
											"        },\r",
											"        \"createdOn\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"createdBy\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"updatedOn\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"updatedBy\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"isDeleted\": {\r",
											"          \"type\": \"boolean\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"id\",\r",
											"        \"sellerId\",\r",
											"        \"charge\",\r",
											"        \"title\",\r",
											"        \"description\",\r",
											"        \"serviceType\",\r",
											"        \"locationType\",\r",
											"        \"availability\",\r",
											"        \"workSample\",\r",
											"        \"categoryId\",\r",
											"        \"subcategoryId\",\r",
											"        \"tags\",\r",
											"        \"comments\",\r",
											"        \"ratings\",\r",
											"        \"ratingAverages\",\r",
											"        \"ratingTotalsAndCounts\",\r",
											"        \"skillTrade\",\r",
											"        \"isTradable\",\r",
											"        \"isActive\",\r",
											"        \"createdOn\",\r",
											"        \"createdBy\",\r",
											"        \"updatedOn\",\r",
											"        \"updatedBy\",\r",
											"        \"isDeleted\"\r",
											"      ]\r",
											"    },\r",
											"    \"categoryTuple\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"item1\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"item2\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"item1\",\r",
											"        \"item2\"\r",
											"      ]\r",
											"    },\r",
											"    \"currentUserId\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"comments\": {\r",
											"      \"type\": \"null\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"serviceListing\",\r",
											"    \"categoryTuple\",\r",
											"    \"currentUserId\",\r",
											"    \"comments\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/GetService/?id=6700b81071480f0001b3091e",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"GetService",
										""
									],
									"query": [
										{
											"key": "id",
											"value": "6700b81071480f0001b3091e"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Toggle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.success).to.be.true;\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"active\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"active\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"{{listingId}}\"",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/toggleIsActive",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"toggleIsActive"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateReceivedRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.globals.set(\"listingId\",responseBody.id);\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.success).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Id\": \"{{ReqId}}\",\r\n  \"Status\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{listingURL}}/listing/listing/updateReceivedRequest",
									"host": [
										"{{listingURL}}"
									],
									"path": [
										"listing",
										"listing",
										"updateReceivedRequest"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ProfileRequestFolder",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "AddInfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.success).to.be.true;\r",
											"   console.log(responseBody.message);\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 1000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"description\": \"{{description}}\",\r\n  \"personId\": \"0\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/addInfo",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"addInfo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\", ()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Check if isDeactivated is false\", ()=>\r",
											"{\r",
											"   pm.expect(responseBody.isDeactivated).to.be.false;\r",
											"});\r",
											"\r",
											"var schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"username\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"isDeactivated\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"username\",\r",
											"    \"isDeactivated\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test(\"Validate schema\", ()=>\r",
											"{\r",
											"    pm.response.to.have.jsonSchema(schema)\r",
											"});\r",
											"\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 500\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/getProfile",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"getProfile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get ProfilePhoto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\",()=>\r",
											"{\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Seller Details Fetched successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											"var Schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"myPhotoUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"otherPhotoUrl\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"myPhotoUrl\",\r",
											"    \"otherPhotoUrl\"\r",
											"  ]\r",
											"};\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(Schema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/getProfilePhoto/?uid=66d68fbca054250001ac7959",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"getProfilePhoto",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "66d68fbca054250001ac7959"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Is User Authenticated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\",()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if isAuthenticated is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.isAuthenticated).to.be.true;\r",
											"});\r",
											" if(jsonData.isAuthenticated)\r",
											" {\r",
											"    console.log(\"User Authenticated\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											"var Schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"isAuthenticated\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"username\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"isAuthenticated\",\r",
											"    \"username\"\r",
											"  ]\r",
											"  }\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(Schema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/isUserAuthenticated",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"isUserAuthenticated"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Availability",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\",()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Availability updated successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											" var Schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\"success\"]\r",
											"};\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(Schema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"console.log(\"Full response body:\", pm.response.text());"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AvailabilityType\": \"0\",\r\n  \"AvailableHours\": \"2\",\r\n  \"EarnTarget\": \"1\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/updateAvailability",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"updateAvailability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update FirstName Lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\",()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Name updated successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											"var Schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"message\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(Schema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"{{firstName}}\",\r\n  \"lastName\": \"{{lastname}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/updateFirstAndLastName",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"updateFirstAndLastName"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Seller Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"pm.test(\"Validate status code is 200\",()=>\r",
											"{\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"pm.test(\"Check if success is true\", ()=>\r",
											"{\r",
											"   pm.expect(jsonData.success).to.be.true;\r",
											"});\r",
											" if(jsonData.success)\r",
											" {\r",
											"    console.log(\"Seller Details Fetched successfully\");\r",
											" }else\r",
											" {\r",
											"    console.log(jsonData.message);\r",
											" }\r",
											"var SellerSchema = {\r",
											"     \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"userName\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"description\": {\r",
											"      \"type\": \"null\"\r",
											"    },\r",
											"    \"averageRating\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"ratingsCount\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"country\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"createdOn\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"success\",\r",
											"    \"userName\",\r",
											"    \"description\",\r",
											"    \"averageRating\",\r",
											"    \"ratingsCount\",\r",
											"    \"country\",\r",
											"    \"createdOn\"\r",
											"  ]\r",
											"}\r",
											"pm.test(\"Validate response schema\", ()=>\r",
											"{\r",
											"    if(jsonData.success === true)\r",
											"    {\r",
											"       pm.response.to.have.jsonSchema(SellerSchema);\r",
											"    }\r",
											"});\r",
											"pm.test(\"Validate headers\", ()=>\r",
											"{\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is within 2000\", ()=>\r",
											"{\r",
											"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{MarsURL}}/profile/profile/getSellerDetails/?uid=66d68fbca054250001ac7959",
									"host": [
										"{{MarsURL}}"
									],
									"path": [
										"profile",
										"profile",
										"getSellerDetails",
										""
									],
									"query": [
										{
											"key": "uid",
											"value": "66d68fbca054250001ac7959"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "NotificationRequestFolder",
			"item": [
				{
					"name": "Get Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Validate status code is 200\",()=>\r",
									"{\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									" if(jsonData.success)\r",
									" {\r",
									"    console.log(\"Notifications fetched successfully\");\r",
									" }else\r",
									" {\r",
									"    console.log(jsonData.message);\r",
									" }\r",
									"var Schema = \r",
									"  {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate response schema\", ()=>\r",
									"{\r",
									"    if(jsonData.success === true)\r",
									"    {\r",
									"       pm.response.to.have.jsonSchema(Schema);\r",
									"    }\r",
									"});\r",
									"pm.test(\"Validate headers\", ()=>\r",
									"{\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within 2000\", ()=>\r",
									"{\r",
									"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{MarsURL}}/notification/notification/getNotification",
							"host": [
								"{{MarsURL}}"
							],
							"path": [
								"notification",
								"notification",
								"getNotification"
							]
						}
					},
					"response": []
				},
				{
					"name": "ReadAllNotifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Validate status code is 200\",()=>\r",
									"{\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									" if(jsonData.success)\r",
									" {\r",
									"    console.log(\"Notifications Read successfully\");\r",
									" }else\r",
									" {\r",
									"    console.log(jsonData.message);\r",
									" }\r",
									"var Schema = {\r",
									"}\r",
									"pm.test(\"Validate response schema\", ()=>\r",
									"{\r",
									"    if(jsonData.success === true)\r",
									"    {\r",
									"       pm.response.to.have.jsonSchema(Schema);\r",
									"    }\r",
									"});\r",
									"pm.test(\"Validate headers\", ()=>\r",
									"{\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within 2000\", ()=>\r",
									"{\r",
									"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{MarsURL}}/notification/notification/readAllNotifications",
							"host": [
								"{{MarsURL}}"
							],
							"path": [
								"notification",
								"notification",
								"readAllNotifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "ReadMarkedNotifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Validate status code is 200\",()=>\r",
									"{\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									" if(jsonData.success)\r",
									" {\r",
									"    console.log(\"Marked Notifications Read successfully\");\r",
									" }else\r",
									" {\r",
									"    console.log(jsonData.message);\r",
									" }\r",
									"var Schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate response schema\", ()=>\r",
									"{\r",
									"    if(jsonData.success === true)\r",
									"    {\r",
									"       pm.response.to.have.jsonSchema(Schema);\r",
									"    }\r",
									"});\r",
									"pm.test(\"Validate headers\", ()=>\r",
									"{\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within 2000\", ()=>\r",
									"{\r",
									"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ids\": \"6710d0ede1a8cc00016b2625\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{MarsURL}}/notification/notification/readMarkedNotifications",
							"host": [
								"{{MarsURL}}"
							],
							"path": [
								"notification",
								"notification",
								"readMarkedNotifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "removeMarkedNotifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Validate status code is 200\",()=>\r",
									"{\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									" if(jsonData.success)\r",
									" {\r",
									"    console.log(\"Marked Notifications Read successfully\");\r",
									" }else\r",
									" {\r",
									"    console.log(jsonData.message);\r",
									" }\r",
									"var Schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"    \"type\": \"boolean\"\r",
									"    },\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"message\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate response schema\", ()=>\r",
									"{\r",
									"    if(jsonData.success === true)\r",
									"    {\r",
									"       pm.response.to.have.jsonSchema(Schema);\r",
									"    }\r",
									"});\r",
									"pm.test(\"Validate headers\", ()=>\r",
									"{\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within 2000\", ()=>\r",
									"{\r",
									"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ids\": \"6710d0ede1a8cc00016b2625\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{MarsURL}}/notification/notification/removeMarkedNotifications",
							"host": [
								"{{MarsURL}}"
							],
							"path": [
								"notification",
								"notification",
								"removeMarkedNotifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetNewNotificationCount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"pm.test(\"Validate status code is 200\", ()=>\r",
									"{\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", ()=>\r",
									"{\r",
									"   pm.expect(responseBody.success).to.be.true;\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"noOfNotification\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"noOfMessages\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"noOfNotification\",\r",
									"    \"noOfMessages\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate schema\", ()=>\r",
									"{\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Validate headers\", ()=>\r",
									"{\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within 2000\", ()=>\r",
									"{\r",
									"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{MarsURL}}/notification/notification/getNewNotificationCount",
							"host": [
								"{{MarsURL}}"
							],
							"path": [
								"notification",
								"notification",
								"getNewNotificationCount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get NotificationLoadMore",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Validate status code is 200\",()=>\r",
									"{\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									" if(jsonData.success)\r",
									" {\r",
									"    console.log(\"Notifications fetched successfully\");\r",
									" }else\r",
									" {\r",
									"    console.log(jsonData.message);\r",
									" }\r",
									"var Schema = \r",
									"  {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"userNotifications\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"url\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"message\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"isViewed\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"updatedOn\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"notificationType\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"icon\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"url\",\r",
									"            \"message\",\r",
									"            \"isViewed\",\r",
									"            \"updatedOn\",\r",
									"            \"notificationType\",\r",
									"            \"icon\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"totalCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"userNotifications\",\r",
									"    \"totalCount\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Validate response schema\", ()=>\r",
									"{\r",
									"    if(jsonData.success === true)\r",
									"    {\r",
									"       pm.response.to.have.jsonSchema(Schema);\r",
									"    }\r",
									"});\r",
									"pm.test(\"Validate headers\", ()=>\r",
									"{\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within 2000\", ()=>\r",
									"{\r",
									"   pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{MarsURL}}/notification/notification/getNotification/",
							"host": [
								"{{MarsURL}}"
							],
							"path": [
								"notification",
								"notification",
								"getNotification",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ChatRequestFolder",
			"item": [
				{
					"name": "Get Chatroom Details List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"pm.test(\"Validate status code is 200\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function()\r",
									"{\r",
									"   pm.expect(responseBody.success).to.be.true;\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"result\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"userIdToList\": {},\r",
									"          \"userIdTo\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"userNameTo\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"userIdFrom\": {},\r",
									"          \"userNameFrom\": {},\r",
									"          \"profilePicUrl\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"unreadMessages\": {\r",
									"            \"type\": \"number\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"userIdToList\",\r",
									"          \"userIdTo\",\r",
									"          \"userNameTo\",\r",
									"          \"userIdFrom\",\r",
									"          \"userNameFrom\",\r",
									"          \"profilePicUrl\",\r",
									"          \"unreadMessages\"\r",
									"        ]\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"result\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", function()\r",
									"{\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Validate headers\", function()\r",
									"{\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within 3000\", function()\r",
									"{\r",
									"   pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"UserIdToList\": [\r\n    \"66b0732df0981a000156ee6b\",\r\n    \"670bc73ab81c670001dd7bf6\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{MarsURL}}/profile/profile/getChatRoomDetailsList",
							"host": [
								"{{MarsURL}}"
							],
							"path": [
								"profile",
								"profile",
								"getChatRoomDetailsList"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get FirstChat Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseBody = pm.response.json();\r",
									"pm.test(\"Validate status code is 200\", function()\r",
									"{\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function()\r",
									"{\r",
									"   pm.expect(responseBody.success).to.be.true;\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"chatroom\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"myCurrentUser\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"chatroom\",\r",
									"    \"myCurrentUser\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", function()\r",
									"{\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Validate headers\", function()\r",
									"{\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is within 1000\", function()\r",
									"{\r",
									"   pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{MarsURL}}/profile/profile/getFirstChatroom",
							"host": [
								"{{MarsURL}}"
							],
							"path": [
								"profile",
								"profile",
								"getFirstChatroom"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "listingURL",
			"value": "http://localhost:51689"
		},
		{
			"key": "Destructivelanguage",
			"value": "EnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglishEnglish",
			"type": "default"
		},
		{
			"key": "DestructiveSkill",
			"value": "SeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSeleniumSelenium",
			"type": "default"
		},
		{
			"key": "firstName",
			"value": "Sai",
			"type": "default"
		},
		{
			"key": "lastname",
			"value": "",
			"type": "default"
		},
		{
			"key": "ListingId",
			"value": "66fed71d71480f0001b308ad",
			"type": "default"
		},
		{
			"key": "NonexistingSkillid",
			"value": "",
			"type": "default"
		},
		{
			"key": "MarsURL",
			"value": "http://localhost:60190",
			"type": "default"
		},
		{
			"key": "emailid",
			"value": "",
			"type": "default"
		}
	]
}